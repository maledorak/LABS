#!/bin/bash

# ====================================
# author: https://github.com/maledorak
# email: maledorak@gmail.com
# version: 0.1
# description: Script for recording voice from microphone and sending to Whisper OpenAI
#
# how to use:
#   1. run it - this will start recording sound: ./whisper.sh -c transcribe -l 30
#   2. stop recording by pressing Ctrl+C or reruning it again with the same arguments to 'shorten' the recording
#
# tips:
#   The best way to use it is to bind it to a key combination in your window manager
#   and then just press it to start recording and stop recording with the same key combination
# ====================================

# Fail the script
function fail { exit 1; }

# Supported commands
TRANSCRIBE='transcribe'
TRANSLATE='translate'
COMMANDS_ARRAY=($TRANSCRIBE $TRANSLATE)
COMMANDS_PIPED=$(IFS="|" ; echo "${COMMANDS_ARRAY[*]}")

function show_help_and_exit
{
    printf "\nUsage: %s -c [${COMMANDS_PIPED}] -s [30] \n\n" "$(basename "$0")"
    printf "Script for recording voice from microphone and sending to Whisper OpenAI \n\n"
    printf "Options:\n"
    printf "  %-20s  - %s\n"  "-h|--help"        "Show this help message"
    printf "  %-20s  - %s\n"  "-c"               "Whisper command to run [${COMMANDS_PIPED}}]"
    printf "  %-20s  - %s\n"  "-l"               "Record length in seconds (default: 30)"
    printf "\n"
    fail
}

# ----------------------------------------------------------------------------------------------------------------------

COMMAND=
LENGTH=30

# Parse arguments
while getopts "hc:l:" opt; do
    case "${opt}" in
        h)
            show_help_and_exit
            ;;
        \?)
            error "Unknown option: $1"
            show_help_and_exit
            ;;
        c)
            COMMAND=${OPTARG}
            ;;
        l)
            LENGTH=${OPTARG}
            ;;
    esac
done

# Validate command argument
if [[ -z $COMMAND ]]; then
    show_help_and_exit
fi

# Validate command argument, only transcribe or translate are supported
if [[ ! "$COMMAND" =~ ^($COMMANDS_PIPED)$ ]]; then
    echo "You can use only [$COMMANDS_PIPED] as a command [-c] argument, but '${COMMAND}' was used!"
    show_help_and_exit
fi

# Validate length argument
if [[ ! $LENGTH =~ ^[[:digit:]-]+$ ]]; then
	echo "Length [-l] argument must be a number, but '${LENGTH}' was used!"
    fail
fi

# Validate length argument
if [[ -z $OPENAI_API_KEY ]]; then
    echo "OPENAI_API_KEY environment variable is not set!"
    echo "Use the following link to set it up: https://platform.openai.com/account/api-keys"
    fail
fi

#====== Check if following commands are installed ====
# Check if ffmpeg is installed
if ! command -v ffmpeg &> /dev/null
then
    echo "ffmpeg could not be found"
    fail
fi

# Check if jq is installed
if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
    fail
fi

# Check if xclip is installed
if ! command -v xclip &> /dev/null
then
    echo "xclip could not be found"
    fail
fi

# Check if openai is installed
if ! command -v openai &> /dev/null
then
    echo "openai could not be found"
    fail
fi

# Check if notify-send is installed
if ! command -v notify-send &> /dev/null
then
    echo "notify-send could not be found"
    fail
fi
#=======================================

FILE_PREFIX=whisper_$COMMAND
file_path=$(pgrep -fa $FILE_PREFIX | awk '{print $NF}')

case $COMMAND in
    $TRANSCRIBE)
        url_path=transcriptions
        notify_string=transcribing
        ;;
    $TRANSLATE)
        url_path=translations
        notify_string=translating
        ;;
esac

if [ -z "$file_path" ]; then
    echo "No process, recording"
    notify-send "Whisper $COMMAND is listening..." &

    file_path="/tmp/${FILE_PREFIX}_$(date '+%Y%m%d%H%M%S').mp3"
    ffmpeg \
        -f alsa \
        -channels 2 \
        -sample_rate 44100 \
        -i hw:0 \
        -t $LENGTH \
        $file_path

else
    echo "Process found, killing and trimming audio"

    pid=$(pgrep -fa $FILE_PREFIX | awk '{print $1}')
    kill -2 $pid
    while $(kill -0 $pid 2>/dev/null); do
        echo 'Waiting for ffmpeg to finish...'
        sleep 0.01
    done
fi

notify-send "Whisper is $notify_string..." &
# https://platform.openai.com/docs/api-reference/audio/create
response=$(curl https://api.openai.com/v1/audio/$url_path \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -H "Content-Type: multipart/form-data" \
        -F file="@$file_path" \
        -F model="whisper-1")

echo $response
trans=$(echo $response | jq -r '.text')
if [ "$trans" == "null" ]; then
    notify-send "Whisper had error..." &
else
    # trim whitespaces
    trans=$(echo $trans | sed 's/ *$//')
    echo $trans | xclip -selection clipboard
    notify-send "'$trans' copied to clipboard." &
fi

rm -rf $file_path
